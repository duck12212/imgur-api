#summary Image Uploading API
#labels Featured,Phase-Implementation

=Image Uploading=

The REST upload API allows one to upload local image files or image URLs to Imgur.

==Details==

  * *URL:* http://imgur.com/api/upload
  * *Method:* POST (HTTP)

==Return Formats==
  * *XML* - http://imgur.com/api/upload.xml (default)
  * *JSON* - http://imgur.com/api/upload.json

==Parameters=
_Must be sent using POST._
  * 'image' - A binary image file, base64 encoded string, or URL.
  * 'key'   - Your registered developer API key. Click [http://imgur.com/register/api/ here] to register for a key.

==Implementation==
Use [http://curl.haxx.se/ cURL] to send the POST data to Imgur. cURL libraries are available for most languages and are very simple to use.

For sending a base64 encoded image, you must base64 encode the entire contents of the image file and send the data through the image parameter.

==Limitations==
The upload API has a daily and hourly upload limit for any given IP address. A single IP address is able to upload 50 images an hour and 200 images a day. For a possible lift or extension of this limit, please contact Alan at: alan@imgur.com.

==Sample Code==
_If you would like to add a language to this section, please email your sample code to Alan at: alan@imgur.com._

*cURL Command Line*
{{{
curl -F "image=@file.png" -F "key=YOUR_API_KEY" http://imgur.com/api/upload.xml
}}}
{{{
curl -d "image=http://example.com/example.jpg" -d "key=YOUR_API_KEY" http://imgur.com/api/upload.json
}}}

*Python*
{{{
#!/usr/bin/python

import pycurl

c = pycurl.Curl()
values = [
          ("key", "YOUR_API_KEY"),
          ("image", (c.FORM_FILE, "file.png"))]
# OR:     ("image", "http://example.com/example.jpg"))]
# OR:     ("image", "BASE64_ENCODED_STRING"))]

c.setopt(c.URL, "http://imgur.com/api/upload.xml")
c.setopt(c.HTTPPOST, values)

c.perform()
c.close()
}}}

*Python and the Google App Engine*
{{{
from google.appengine.api import urlfetch
import urllib
import base64
from django.utils import simplejson as json

class Client:
  def __init__(self, imgur_key): self.imgur_key = imgur_key

  # upload: imgdata is binary image data
  def upload(self, imgdata):
    payload_data=urllib.urlencode({"key":self.imgur_key, "image":base64.b64encode(imgdata)})
    s = urlfetch.fetch("http://imgur.com/api/upload.json", method=urlfetch.POST, payload=payload_data)
    data = json.loads(s.content)
    return data

  # delete
  def delete(self, dhash):
    return json.loads(urlfetch.fetch("http://imgur.com/api/delete/"+dhash+".json"))

  # image stats
  def istats(self, ihash):
    return json.loads(urlfetch.fetch("http://imgur.com/api/stats/"+ihash+".json"))

  # site stats
  def sstats(self, view="all"):
    payload_data=urllib.urlencode({"view":view})
    return json.loads(urlfetch.fetch("http://imgur.com/api/stats.json", payload=payload_data))

  def gallery(self, sort="latest", view="all", count=20, page=1):
    payload_data=urllib.urlencode({"sort":sort, "view":view, "count":count, "page":page})
    return json.loads(urlfetch.fetch("http://imgur.com/api/stats.json", payload=payload_data))
}}}

*PHP*
{{{
<?
    $filename = "image.jpg";
    $handle = fopen($filename, "r");
    $data = fread($handle, filesize($filename));

    // $data is file data
    $pvars   = array('image' => base64_encode($data), 'key' => IMGUR_API_KEY);
    $timeout = 30;
    $curl    = curl_init();

    curl_setopt($curl, CURLOPT_URL, 'http://imgur.com/api/upload.xml');
    curl_setopt($curl, CURLOPT_TIMEOUT, $timeout);
    curl_setopt($curl, CURLOPT_POST, 1);
    curl_setopt($curl, CURLOPT_POSTFIELDS, $pvars);

    $xml = curl_exec($curl);

    curl_close ($curl);
?>
}}}

==Sample Response==
*XML*
{{{
<?xml version="1.0" encoding="utf-8"?>
<rsp stat="ok">
	<image_hash>cxmHM</image_hash>
	<delete_hash>NNy6VNpiAA</delete_hash>
	<original_image>http://imgur.com/cxmHM.png</original_image>
	<large_thumbnail>http://imgur.com/cxmHMl.png</large_thumbnail>
	<small_thumbnail>http://imgur.com/cxmHMs.png</small_thumbnail>
	<imgur_page>http://imgur.com/cxmHM</imgur_page>
	<delete_page>http://imgur.com/delete/NNy6VNpiAA</delete_page>
</rsp>
}}}

*JSON*
{{{
{
        "rsp": {
                "stat": "ok", 
                "image": {
                        "image_hash": "mM84h", 
                        "delete_hash": "CZoRTG208s", 
                        "original_image": "http://imgur.com/mM84h.png", 
                        "large_thumbnail": "http://imgur.com/mM84hl.png", 
                        "small_thumbnail": "http://imgur.com/mM84hs.png", 
                        "imgur_page": "http://imgur.com/mM84h", 
                        "delete_page": "http://imgur.com/delete/CZoRTG208s"
                }
        }
}
}}}

===Errors===

*XML*
{{{
<rsp stat="fail">
	<error_code>1000</error_code>
	<error_msg>No image selected</error_msg>
</rsp>
}}}

*JSON*
{{{
{
	"rsp": {
		"stat": "fail", 
		"error_code": 1000, 
		"error_msg": "No image selected"
	}
}
}}}

==Possible Errors==
|| *Code* || *Message* ||
|| 1000 || No image selected ||
|| 1001 || Image failed to upload ||
|| 1002 || Image larger than 10MB ||
|| 1003 || Invalid image type or URL ||
|| 1004 || Invalid API Key ||
|| 1005 || Upload failed during process ||
|| 1006 || Upload failed during the copy process ||
|| 1007 || Upload failed during thumbnail process ||
|| 1008 || Upload limit reached ||
|| 1009 || Animated GIF is larger than 2MB ||
|| 1010 || Animated PNG is larger than 2MB ||
|| 1011 || Invalid URL ||
|| 1012 || Could not download the image from that URL ||
|| 9000 || Invalid API request ||
|| 9001 || Invalid response format ||